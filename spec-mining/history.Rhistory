Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
library(automatonR)
install.packages
install.package()
install()
library(devtools)
install()
traceTimes = c(0, 2, 2, 6, 12, 13, 18, 20, 23, 26)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.0)+")
traceTimes = c(0, 2, 2, 6, 12, 13, 18, 20, 23, 26)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
library(automatonR)
install()
traceTimes = c(0, 2, 2, 6, 12, 13, 18, 20, 23, 26)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.0)+")
r$success
library(automatonR)
install()
traceTimes = c(0, 2, 2, 6, 12, 13, 18, 20, 23, 26)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 26)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
e_success = array(c(NA, 2, 0, 0, NA, 1, 0, 0, NA), c(3, 3))
e_reset = array(c(NA, 4, 3, 4, NA, 4, 2, 7, NA), c(3, 3))
expect_equal(e_success, r$success)
expect_equal(e_reset, r$reset)
library(test_that)
library('test_that')
library('testthat')
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 26)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
e_success = array(c(NA, 2, 0, 0, NA, 1, 0, 0, NA), c(3, 3))
e_reset = array(c(NA, 4, 3, 4, NA, 4, 2, 7, NA), c(3, 3))
expect_equal(e_success, r$success)
expect_equal(e_reset, r$reset)
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 24)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
e_success = array(c(NA, 2, 0, 0, NA, 1, 0, 0, NA), c(3, 3))
e_reset = array(c(NA, 4, 3, 4, NA, 4, 2, 7, NA), c(3, 3))
expect_equal(e_success, r$success)
expect_equal(e_reset, r$reset)
e_success
c(NA, 2, 0, 0, NA, 1, 0, 0, NA),
c(NA, 2, 0, 0, NA, 1, 0, 0, NA)
Sys.setenv("PKG_CXXFLAGS"="-DDEBUG")
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
library(automatonR)
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x -DDEBUG")
library(automatonR)
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 24)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
library(automatonR)
install()
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 24)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
r$success
library(automatonR)
install()
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 24)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 24)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
install()
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 24)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
install()
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 24)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(1.<0+>[2,5])+")
r$success
traceTimes = c(0, 2, 3, 6, 12, 13, 18, 20, 23, 24)
traceEvents = c(1, 2, 2, 2, 3, 2, 3, 3, 2, 2)
alphabetLength = 3
r = processTrace(traceTimes, traceEvents, alphabetLength, "(0.<1+>[2,5])+")
r$success
traceTimes = c(0, 2, 3, 5, 7)
traceEvents = c(1, 2, 2, 1, 2)
alphabetLength = 2
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,2] | <1.0>[0,3])+")
r$success
traceTimes = c(0, 2, 3, 5, 9)
traceEvents = c(1, 2, 2, 1, 2)
alphabetLength = 2
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,2] | <1.0>[0,3])+")
r$success
traceTimes = c(0, 4, 10, 12, 18)
traceEvents = c(1, 2, 2, 1, 2)
alphabetLength = 2
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,2] | <1.0>[0,3])+")
r$success
traceTimes = c(0, 2, 10, 12, 18)
traceEvents = c(1, 2, 2, 1, 2)
alphabetLength = 2
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,2] | <1.0>[0,3])+")
r$success
read.csv(file="/home//y2joshi//maven-repo/CANDataRiTHMEx.csv",head=TRUE,sep=",")
candata<-read.csv(file="/home//y2joshi//maven-repo/CANDataRiTHMEx.csv",head=TRUE,sep=",")
candata$timestamp
candata$event
candata<-read.csv(file="/home//y2joshi//maven-repo/CANDataRiTHMEx.csv",head=TRUE,sep=",")
candata$event
candata<-read.csv(file="/home//y2joshi//maven-repo/CANDataRiTHMEx.csv",head=TRUE,sep=",")
candata<-read.csv(file="/home//y2joshi//maven-repo/CANDataRiTHMEx.csv",head=TRUE,sep=",")
candata$event
candata$event
traceTimes = c(0, 2, 3, 5, 7)
traceEvents
traceTimes
traceTimes<-candata$timestamp
traceEvents<-candata$event
alphabetLength = 41
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,1])")
r$success
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
library(automatonR)
install()
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,1])")
r$success
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,0.01])")
r$success
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,0.001])")
r$success
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,1]) | (<1.0>[0,1])")
r$success
r$success
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,1])")
r$success
install('Rgraphviz')
install.packages('Rgraphviz')
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
library(Rgraphviz)
doMagic <- function(q) {
graphics.off()
q.l <- c(levels(q$a), levels(q$b)) %>% unique()
q.len <- length(q.l)
plot.new()
for(i in 1:(q.len/2)) {
text(0,(2/q.len)*i,paste0(i," ... ", q.l[i]), adj=0)
text(0.5,(2/q.len)*i,paste0(floor(i+q.len/2)," ... ", q.l[i+q.len/2]), adj=0)
}
x11()
q <- copy(q)
q[,a:=as.numeric(a)]
q[,b:=as.numeric(b)]
q[,a:=as.character(a)]
q[,b:=as.character(b)]
nodes <- c(q$a, q$b) %>% unique()
rEG <- new("graphNEL", nodes=nodes, edgemode="directed")
rEG <- addEdge(q$a, q$b, rEG, 1)
plot(rEG)
}
r$success
install('igraph')
biocLite("igraph")
rmat<-as.matrix(r$success)
rmat
t(rmat)
library(igraph)
graph <- graph.adjacency(rmat,
weighted=TRUE,
mode="undirected",
diag=FALSE)
seq(1,41)
names = seq(1,41)
names
plot(graph,
vertex.label=names,
vertex.size=18,
edge.width=E(graph)$weight)
E(graph)
E(graph)[1]
E(graph)[1]$weight
r$success[-20, -20]
install('submatrix')
install.packages('submatrix')
biocLite("submatrix")
library('submatrix')
rmat[,10]
rmat[-2]
rmat[-2, ]
rmat[-2, -2]
rmat[-20, -20]
rmat[1:10, 1:10]
rmat1 = rmat[1:10, 1:10]
plot(graph,
vertex.label=names,
vertex.size=18,
edge.width=E(graph)$weight)
graph <- graph.adjacency(rmat,
weighted=TRUE,
mode="undirected",
diag=FALSE)
names = seq(1,10)
plot(graph,
vertex.label=names,
vertex.size=18,
edge.width=E(graph)$weight)
graph <- graph.adjacency(rmat1,
weighted=TRUE,
mode="undirected",
diag=FALSE)
plot(graph,
vertex.label=names,
vertex.size=18,
edge.width=E(graph)$weight)
plot(graph,
vertex.label=names,
vertex.size=18,
edge.width=E(graph)$weight/10)
cmap<-read.csv(file="/home/y2joshi/maven-repo/C", header=TRUE, sep=",")
cmap<-read.csv(file="/home/y2joshi/maven-repo/C", header=TRUE, sep=",")
cmap<-read.csv(file="/home/y2joshi/maven-repo/CANMap", header=TRUE, sep=",")
cmap
cmap = cmap[1:10,]
cmap
cmap$NAME
plot(graph,
vertex.label=cmap$NAME,
vertex.size=18,
edge.width=E(graph)$weight/10)
plot(graph,
vertex.label=as.character(cmap$NAME),
vertex.size=18,
edge.width=E(graph)$weight/10)
plot(graph,
vertex.label=as.character(cmap$NAME),
vertex.size=18,
edge.width=E(graph)$weight/7)
rmat1 = rmat[1:15, 1:15]
graph <- graph.adjacency(rmat1,
weighted=TRUE,
mode="undirected",
diag=FALSE)
cmap<-read.csv(file="/home/y2joshi/maven-repo/CANMap", header=TRUE, sep=",")
cmap = cmap[1:15,]
plot(graph,
vertex.label=as.character(cmap$NAME),
vertex.size=18,
edge.width=E(graph)$weight/7)
rmat1
log10(rmat1)
log2(rmat1)
rmat1[!is.finite(rmat1)] <- 0
rmat1
rmatlog<-log2(rmat1)
rmatlog[!is.finite(rmatlog)] <- 0
rmatlog
graph <- graph.adjacency(rmatlog,
weighted=TRUE,
mode="undirected",
diag=FALSE)
plot(graph,
vertex.label=as.character(cmap$NAME),
vertex.size=18,
edge.width=E(graph)$weight/7)
plot(graph,
vertex.label=as.character(cmap$NAME),
vertex.size=18,
edge.width=E(graph)$weight)
plot(graph,
vertex.label=as.character(cmap$NAME),
vertex.size=18,
edge.width=E(graph)$weight*2)
plot(graph,
vertex.label=as.character(cmap$NAME),
vertex.size=18,
edge.width=E(graph)$weight*0.5)
plot(graph,
vertex.label=as.character(cmap$NAME),
vertex.size=18,
edge.width=E(graph)$weight*0.8)
rmat1
rmat
rmat2 = rmat[8:18, 8:18]
rmatlog2<-log2(rmat2)
rmatlog2[!is.finite(rmatlog2)] <- 0
cmap2 = cmap[8:18,]
graph <- graph.adjacency(rmatlog2,
weighted=TRUE,
mode="undirected",
diag=FALSE)
plot(graph,
vertex.label=as.character(cmap2$NAME),
vertex.size=18,
edge.width=E(graph)$weight*0.8)
cmap<-read.csv(file="/home/y2joshi/maven-repo/CANMap", header=TRUE, sep=",")
cmap2 = cmap[8:18,]
plot(graph,
vertex.label=as.character(cmap2$NAME),
vertex.size=18,
edge.width=E(graph)$weight*0.8)
plot(graph,
vertex.label=as.character(cmap2$NAME),
vertex.size=18,
edge.width=E(graph)$weight*2)
plot(graph,
vertex.label=as.character(cmap2$NAME),
vertex.size=18,
edge.width=E(graph)$weight*1.5)
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,1])")
plot(graph,
vertex.label=as.character(cmap2$NAME),
vertex.size=18,
edge.width=E(graph)$weight*1.5)
r = processTrace(traceTimes, traceEvents, alphabetLength, "(<0.1>[0,1])")
r$success
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
library(automatonR)
install()
savehistory("~/ura/spec-mining/history.Rhistory")
