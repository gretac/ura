install.packages('Rcpp')
install.packages('knitr')
installed.packages('testthat')
install.packages('testthat')
install.packages('testthat', dependencies =  TRUE)
install.packages('devtools', dependencies =  TRUE)
install.packages('devtools', dependencies =  TRUE)
install.packages('devtools', dependencies =  TRUE)
install.packages('xml2', dependencies =  TRUE)
version
install.packages("Rcpp")
install.packages("testthat")
install.packages("Rcpp")
install.packages("testthat")
install.packages("knitr")
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
library(automatonR)
install.packages("roxygen2")
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x -DDEBUG")
qnxData <- read.csv(file="/home/y2joshi/ownCloud/kevToCsv/hil-clean-subset-preproc.csv", header=TRUE, sep=",")
traceTimes = qnxData$time
traceEvents = qnxData$traceEvent
alphabetLength = 6
library(automatonR)
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^0)*.((<0.(^1)*.1>[0,20000]).(^0)*)+")
createTimedAutomaton("(^0)*.((<0.(^1)*.1>[0,20000]).(^0)*)+")
createTimedAutomaton("(^(0))*.((<0.(^(1))*.1>[0,20000]).(^(0))*)+")
createTimedAutomaton("(^0)*")
alphabetLength
r = processTrace(traceTimes, traceEvents, alphabetLength-1, "(^0)*.((<0.(^1)*.1>[0,20000]).(^0)*)+")
r$success
install.packages(c("Rcpp","RInside"),type="source")
install.packages(c("Rcpp", "RInside"), type = "source")
library(automatonR)
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
library(automatonR)
library(automatonR)
list.files("~/kevToCsv/","hil-clean-02[0-9].csv")
list.files("~/kevToCsv/","hil-clean-02*.csv")
list.files("~/kevToCsv/","hil-clean-021*.csv")
list.files("~/kevToCsv/","hil-clean-02[0-9].txt")
library(automatonR)
qnxData <- read.csv(file="/home/y2joshi/kevToCsv/hil-clean-020.txt", header=TRUE, sep=",")
traceTimes = qnxData$time
traceEvents = qnxData$traceEvent
traceEvents
traceTimes
traceEvents
traceEvents
alphabetLength = 45
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,40000]).(^(0)*))+")
r$success
savehistory("~/ura/spec-mining/history3.Rhistory")
prob = r$success / (r$success + r$reset)
prob
r$reset
prob[prob > 0]
prob[prob > 0.9]
prob[prob > 0.99]
r$success[is.na(r$success)] <- 0
r$success
r$reset[is.na(r$reset)] <- 0
prob = r$success / (r$success + r$reset)
prob
a = c(1..100)
a = c(1:100)
a
a = c(1:27)
dim(a)<-c(3,3)
dim(a)<-c(3,3,3)
a
savehistory("~/ura/spec-mining/history4.Rhistory")
qnxData <- read.csv(file="/home/y2joshi/ownCloud/kevToCsv/hil-clean-subset-preproc.csv", header=TRUE, sep=",")
traceTimes = qnxData$time
traceEvents = qnxData$traceEvent
alphabetLength = 6
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,40000]).(^(0)*))+")
r$success
r$reset
prob = r$success / (r$success + r$reset)
prob
qnxData
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,20000]).(^(0)*))+")
r$success
r$reset
prob = r$success / (r$success + r$reset)
prob
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
r$success
r$reset
prob = r$success / (r$success + r$reset)
prob
qnxData
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x -DDEBUG")
library(automatonR)
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
qnxData <- read.csv(file="/home/y2joshi/ownCloud/kevToCsv/hil-clean-subset-preproc.csv", header=TRUE, sep=",")
traceTimes = qnxData$time
traceEvents = qnxData$traceEvent
alphabetLength = 6
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
sink("~/kevToCsv/sink-examp.txt")
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
sink("~/kevToCsv/sink-examp.txt",type = "message")
sink(type = "message")
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
unlink("~/kevToCsv/sink-examp.txt")
sink("~/kevToCsv/sink-examp.txt",type = "message")
sink()
unlink("~/kevToCsv/sink-examp.txt")
sink("~/kevToCsv/sink-examp.txt",type = "message")
sink()
sink("~/kevToCsv/sink-exampq.txt",type = "message")
sink(type = "message")
unlink("~/kevToCsv/sink-examp.txt")
sink("~/kevToCsv/sink-examp.txt",type = "message")
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
sink(type = "message")
sink()
file.show("all.Rout")
con <- file("test.log")
sink(con, append=TRUE)
sink(con, append=TRUE, type="message").
sink(con, append=TRUE)
sink(con, append=TRUE, type="message")
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
sink()
sink(type="message")
ls
ls()
cat(readLines("test.log"), sep="\n")
capture.output(r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+"),file = "~/test.log",append = TRUE)
sink()
sink()
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
sink(type = "message")
sink()
file.show("all.Rout")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,2000]).(^(0)*))+")
r$success
r$reset
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,8000]).(^(0)*))+")
r$success
r$reset
prob = r$success | (r$success + r$reset)
prob
prob = r$success / (r$success + r$reset)
prob
qnxData
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,4000]).(^(0)*))+")
r$success
r$reset
traceTimes = c(0,1,10,12)
traceEvents = c(1,2,1,2)
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,4000]).(^(0)*))+")
r$success
r$reset
library(automatonR)
install()
library('devtools')
install()
createTimedAutomaton("0*")
library(automatonR)
install()
createTimedAutomaton("0*")
library(automatonR)
install()
library(automatonR)
install()
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,4000]).(^(0)*))+")
install()
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,4000]).(^(0)*))+")
r$success
r$reset
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,10]).(^(0)*))+")
r$success
r$reset
createTimedAutomaton("(^(0)*).((<0.^(1)*.1>[0,10]).(^(0)*))+")
library(automatonR)
install()
createTimedAutomaton("(^(0)*).((<0.^(1)*.1>[0,10]).(^(0)*))+")
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,10]).(^(0)*))+")
r$success
traceTimes
traceEvents
library(automatonR)
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,10]).(^(0)*))+")
r$success
r$reset
library(automatonR)
install()
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,10]).(^(0)*))+")
traceEvents
library(automatonR)
install()
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,10]).(^(0)*))+")
r$success
r$reset
traceEvents
traceTimes
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
r$success
traceTimes
r$reset
createTimedAutomaton("(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
r$success
r$reset
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
createTimedAutomaton("(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
library(automatonR)
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
install()
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
r$success
r$reset
r = processTrace(traceTimes, traceEvents, 2, "((<0.^(1)*.1>[0,200]).(^(0)*))+")
r$success
createTimedAutomaton("(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
install()
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
install()
r = processTrace(traceTimes, traceEvents, 2, "(^(0)*).((<0.^(1)*.1>[0,200]).(^(0)*))+")
r$success
r$reset
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
library(automatonR)
qnxData <- read.csv(file="/home/y2joshi/kevToCsv/hil-clean-020.txt", header=TRUE, sep=",")
traceTimes = qnxData$time
traceEvents = qnxData$traceEvent
alphabetLength = 45
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,40000]).(^(0)*))+")
r$success
r$reset
prob = r$success / (r$success + r$reset)
prob
qnxData <- read.csv(file="/home/y2joshi/ownCloud/kevToCsv/hil-clean-subset-preproc.csv", header=TRUE, sep=",")
traceTimes = qnxData$time
traceEvents = qnxData$traceEvent
alphabetLength = 6
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,40000]).(^(0)*))+")
r$success
r$reset
prob = r$success / (r$success + r$reset)
prob
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,4000]).(^(0)*))+")
prob = r$success / (r$success + r$reset)
prob
r$success
r$reset
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,10000]).(^(0)*))+")
r$success
prob = r$success / (r$success + r$reset)
prob
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x -DDEBUG")
library(automatonR)
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,10000]).(^(0)*))+")
createTimedAutomaton("(^(0)*).((<0.^(1)*.1>[0,10000]).(^(0)*))+")
library(automatonR)
install()
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,10000]).(^(0)*))+")
r$success
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,10000]).(^(0)*))+")
library(automatonR)
install()
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,10000]).(^(0)*))+")
r$success
qnxData
install()
library(automatonR)
install()
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,10000]).(^(0)*))+")
qnxData
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,40000]).(^(0)*))+")
r$success
prob = r$success / (r$success + r$reset)
prob
qnxData
savehistory("~/ura/spec-mining/history5.Rhistory")
r
prob
subset(prob, prob > 0.5)
prob
apply(prob,FUN = prob > 0.5)
apply(prob,FUN = function(x) x > 0.5)
apply(prob,MARGIN = c(6,6), FUN = function(x) x > 0.5)
prob[is.nan(prob)|| is.na(prob)] <- 0
prob
prob = r$success / (r$success + r$reset)
prob[is.nan(prob)] <- 0
prob
prob[is.na(prob)] <- 0
prob
apply(prob,MARGIN = c(6,6), FUN = function(x) x > 0.5)
apply(prob,MARGIN = c(6,6), function(x) x > 0.5)
apply(prob,MARGIN = c(6,6), prob > 0.5)
apply(prob, 1, function(x) x > 0.5)
apply(prob, 1:1, function(x) x > 0.5)
apply(prob, 1:2, function(x) x > 0.5)
inds = which(prob == TRUE, arr.ind=TRUE)
inds
array(1:27, c(3,3,3))
x = array(1:27, c(3,3,3))
which(x % 2 == 0, arr.ind = TRUE)
which(x / 2 == 0, arr.ind = TRUE)
which(x > 10, arr.ind = TRUE)
inds
inds[0]
inds[1]
inds[1:2]
inds[1,]
inds[2,]
which(x > 10, arr.ind = TRUE)
which(x > 10, arr.ind = TRUE)[1,]
which(x > 10, arr.ind = TRUE)[2,]
library(automatonR)
library(automatonR)
install()
getMinedSpecifications(resultList = r,threshold = 0.5)
Sys.setenv("PKG_CXXFLAGS"="-std=c++0x")
library(automatonR)
install()
qnxData <- read.csv(file="/home/y2joshi/kevToCsv/hil-clean-020.txt", header=TRUE, sep=",")
traceTimes = qnxData$time
traceEvents = qnxData$traceEvent
alphabetLength = 45
r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,40000]).(^(0)*))+")
getMinedSpecifications(resultList = r,threshold = 0.9)
qnxData
getMinedSpecifications(resultList = r,threshold = 0.9)
savehistory("~/ura/spec-mining/history6.Rhistory")
alphabetLength = 45
system.time(replicate(10,r = processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,40000]).(^(0)*))+")))
alphabetLength = 45
system.time(replicate(10,processTrace(traceTimes, traceEvents, alphabetLength, "(^(0)*).((<0.^(1)*.1>[0,40000]).(^(0)*))+")))
savehistory("~/ura/spec-mining/history7.Rhistory")
